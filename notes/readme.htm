<!DOCTYPE html public "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="shortcut icon" type="image/x-icon" href="/home/microsounds/Git/website/static/doki.ico">
	<link rel="stylesheet" type="text/css" href="/home/microsounds/Git/website/static/style.css">
	<title>kagami — static microblog processor | microsounds' idle blog</title>
</head>
<body>
<div class="navbar">
	<a href="/home/microsounds/Git/website/index.htm"><img class="avatar" alt="avatar" src="https://avatars3.githubusercontent.com/u/15962566"></a>
	<div class="container">
		<div class="title"><a href="/home/microsounds/Git/website/index.htm">microsounds' idle blog</a></div>
		<div class="subtitle">do you like flower music?</div>
		<ul>
			<li><a href="https://github.com/microsounds">github</a></li>
			<li><a href="/home/microsounds/Git/website/notes/index.htm">notes</a></li>
		</ul>
	</div>
</div>
<div class="content">
<!--kagami v0.4 — static microblog processor-->
<img src="static/kagami.png" width="270px" align="right" alt="kagami">
<h1>kagami — static microblog processor</h1>
<p>This is a minimalist POSIX shell implementation of a static HTML template
processor, designed for low-frequency Web 1.0-era blogposting.</p>
<h2><strong>kagami</strong> provides an extensible <a href="#background">turing tarpit</a> for dynamically
generating webpages from plaintext Markdown files through an easy to use
templating system and macro preprocessor.</h2>
<h3>Templating System</h3>
<p>There are only 2 user-extensible templates, <code>head.htm</code> and <code>tail.htm</code>, which go
before and after all your generated webpages, respectively.</p>
<h3>Macro Preprocessor</h3>
<p><strong>kagami</strong> also provides a user-extensible macro preprocessor, using inline syntax
that can appear anywhere in your templates or plaintext Markdown.</p>
<pre><code class="language-html">&lt;!-- .kagami/head.htm --&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/home/microsounds/Git/website/res/style.css&quot;&gt;
</code></pre>
<pre><code class="language-html">&lt;!-- .kagami/tail.htm --&gt;
&lt;span class=&quot;footnote&quot;&gt;&lt;/span&gt;
</code></pre>
<p>Macros take the form <code></code> and correspond to an existing shell
environment variable, or one you define yourself using the optional <code>macros</code>
file that is sourced at runtime. They are evaluated and replaced from the final
webpage.</p>
<pre><code class="language-shell"># .kagami/macros
DOC_ROOT='/var/www'
FOOTNOTE=&quot;(c) $(date '+%Y') &lt;your name&gt; -- All Rights Reserved.&quot;
</code></pre>
<h1>Usage</h1>
<table>
<thead>
<tr>
<th align="left">command line option</th>
<th align="left">effect</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>clean</code></td>
<td align="left">Recursively deletes all output files that would have been created under normal operation.</td>
</tr>
<tr>
<td align="left"><code>-h</code>, <code>--help</code></td>
<td align="left">Displays help information.</td>
</tr>
<tr>
<td align="left"><code>-v</code>, <code>--version</code></td>
<td align="left">Displays version information.</td>
</tr>
</tbody>
</table>
<p>Invoking <strong>kagami</strong> searches the current directory and all parent directories above
it for an existing <code>.kagami/</code> configuration and a <code>src/</code> directory. If found,
this becomes the <em><strong>working directory</strong></em>, all operations are relative to this
directory.</p>
<p><strong>kagami</strong> will then recurse through the <code>src/</code> directory and convert every
plaintext <code>*.htm</code> Markdown file into a corresponding <code>*.htm</code> file outside of
<code>src/</code>, preserving the same directory structure.</p>
<p>Subsequent invocations will only refresh webpages that are older than their
corresponding source file. Indexes are always refreshed, regaredless of file
age.
If the <code>.kagami/</code> configuration has changed, all webpages will be regenerated.</p>
<h3>Error Handling</h3>
<p><strong>kagami</strong> does very little error handling,
Missing configuration files will give error messages, but user error will not.</p>
<p>The <code>.kagami/</code> and <code>src/</code> directories can be empty and <strong>kagami</strong> might warn
about it but won’t stop you, you just won’t get anything useful.</p>
<p>An example configuration is provided so you can get started.</p>
<h1>Dynamic Indexes and Linking</h1>
<p>Markdown files can contain metadata tags, such as creation date or time of
last modification, which take the form <code>&lt;!--label XXXX/XX/XX--&gt;</code> where the
date string can be any valid human readable date understood by GNU date.</p>
<p>If a particular directory has an <code>index.htm</code>, the resulting webpage will feature
a dynamic list of all other webpages in the same directory sorted by creation
date appended after your content.</p>
<p>Omitting date information lets you exclude files from this index.</p>
<p>You can also manually link to other pages arbitrarily.</p>
<pre><code class="language-html">[link](/home/microsounds/Git/website/path/to/file.htm)
&lt;a href=&quot;/home/microsounds/Git/website/path/to/file.htm&quot;&gt;...&lt;/a&gt;
</code></pre>
<p>If you link to another <code>*.htm</code> document, it will be converted to an <code>*.htm</code> link.</p>
<h1>Macros</h1>
<p>When a <code></code> is found, the brackets are removed, the resulting identifier
is interpreted as a shell variable <code>$MACRO</code> and it’s contents replace the
macro text in-place. If the variable is empty or unset, the macro is stripped
from the final webpage.</p>
<p>Only the characters <code>A-Za-z0-9_</code> can be used as macro identifiers.</p>
<h3>Global Macros</h3>
<p>These are generated at startup and do not change during runtime.</p>
<p>User-provided shell variables sourced from <code>.kagami/macros</code> can extend, override
or unset these at will.</p>
<table>
<thead>
<tr>
<th align="left">built-in</th>
<th align="left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>VERSION</code></td>
<td align="left">Processor name and version information.</td>
</tr>
<tr>
<td align="left"><code>DOC_ROOT</code></td>
<td align="left">Document root prefix, set to working directory by default.</td>
</tr>
</tbody>
</table>
<h3>Local Macros</h3>
<p>These are uniquely generated from every processed file at runtime and override global and
user-provided shell variables.</p>
<table>
<thead>
<tr>
<th align="left">built-in</th>
<th align="left">description</th>
<th align="left">fallback</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>TITLE</code></td>
<td align="left">Taken from first <code>&lt;h1&gt;</code> heading on the page.</td>
<td align="left">page filename</td>
</tr>
<tr>
<td align="left"><code>CREATED</code></td>
<td align="left">Taken from first markdown comment in the form <code>&lt;!--created xx/xx/xxxx--&gt;</code></td>
<td align="left">N/A</td>
</tr>
<tr>
<td align="left"><code>UPDATED</code></td>
<td align="left">Taken from second markdown comment in the form <code>&lt;!--updated xx/xx/xxxx--&gt;</code></td>
<td align="left">N/A</td>
</tr>
</tbody>
</table>
<h1>Installation</h1>
<p><strong>kagami</strong> is a single shell script, you can keep it with your webpages at
the document root, or you can install it to your path by running <code>make install</code>.</p>
<p>The default install location is <code>/usr/local</code>, you can change this with
<code>make install PREFIX=$HOME/.local</code></p>
<h1>Requirements</h1>
<ul>
<li>POSIX sh</li>
<li>GNU coreutils — Requires GNU date for date conversion routines</li>
<li><a href="https://github.com/commonmark/cmark">cmark</a> — CommonMark Markdown to HTML converter</li>
<li><a href="https://github.com/github/cmark-gfm">cmark-gfm</a> <em>(optional)</em> — cmark with GitHub Extensions
<ul>
<li><strong>kagami</strong> will fall back to standard cmark if not installed.</li>
</ul>
</li>
</ul>
<h1>Background</h1>
<blockquote>
<p><strong>kagami</strong> (かがみ) is weeb for <em>mirror</em> (鏡)</p>
</blockquote>
<p><strong>kagami</strong> was written to fit a particular use case, if your needs are simple,
then <strong>kagami</strong> is simple.
This isn’t a full-fat wordpress-style blog generator. Management of static
elements such as images, client-side Javascript, stylesheets and site
structure are delegated to the user.</p>
<h1>Example</h1>
<p><del>My <a href="https://microsounds.github.io">personal site</a> is built with <strong>kagami</strong> from
sources located <a href="https://github.com/microsounds/microsounds.github.io">here</a>.</del></p>
<h1>License</h1>
<p>GNU General Public License version 3 or later.</p>
<hr>
<div class="footnote">
	<p>
		site text CC BY-SA 4.0 — &copy; 2020 microsounds &lt;<a href="https://github.com/microsounds">https://github.com/microsounds</a>&gt;<br>
		Powered by <a href="https://github.com/microsounds/kagami">kagami v0.4 — static microblog processor</a>
	</p>
</div>
</div>
</body>
</html>
